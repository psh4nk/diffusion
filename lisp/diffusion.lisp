#!/usr/bin/sbcl --script

; Lisp checked for mass consistency on 11/8/17

; Define variables
(defvar cube)
(defvar diff_coeff)
(defvar dimension)
(defvar gas_speed)
(defvar step_count)
(defvar dist)
(defvar change)
(defvar dterm)
(defvar clock)
(defvar rat)
(defvar N)
(defvar sum)
(defvar maxv)
(defvar minv)
(defvar usepartition)

;;;DIMENSIONS;;;
(setq N 10)
;;;;;;;;;;;;;;;;

; Set up the variable to hold a NxNxN matrix
(setf cube(make-array`(,N ,N ,N)))

; set variables
(setq diff_coeff 0.175)
(setq dimension 5)
(setq gas_speed 250.0)
(setq step_count   (/ (/ dimension gas_speed) N))
(setq dist (/ dimension N))
(setq change 0.0)
(setq dterm   (* ( / step_count (* dist dist)) diff_coeff))
(setq clock 0.0)
(setq rat 0.0)

;;; SET WHETHER TO USE PARTITION ;;;
;;; 1 = USE, 0 = DON'T USE       ;;;
(setq usepartition 1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Start the process of filling the matrix
(dotimes(i N)
  (dotimes(j N)
    (dotimes(k N) 
      (setf(aref cube i j k) 0 )
      )
    )
  )

(setf(aref cube 0 0 0) 1.0e21)

;set markers for partition
(cond((= usepartition 1)
      (loop for j from (-(/ N 2) 1) to (- N 1) 
            do (dotimes(k N) 
                 (setf(aref cube (-(/ N 2) 1 ) j k) -1.0)
                 )
            )
      )
  )

; loop through cube until equilibrium reached
(loop while (< rat 0.99)
      do (dotimes(i N)
           (dotimes(j N)
             (dotimes(k N)
               (cond ( (and (= usepartition 1) ( /= (aref cube i j k) -1.0))
                      (cond ( (and (> i 1) ( /= ( aref cube (- i 1) j k) -1.0 ))
                             (setq change (* ( - (aref cube i j k) (aref cube (- i 1) j k) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube (- i 1) j k) (+ (aref cube (- i 1) j k) change)) 
                             )
                            )
                      (cond ( ( and (< (+ i 1) N) ( /= (aref cube (+ i 1) j k) -1.0))
                             (setq change (* ( - (aref cube i j k) (aref cube (+ i 1) j k) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube (+ i 1) j k) (+ (aref cube (+ i 1) j k) change)) 
                             )
                            )
                      (cond ( (and (> j 1) ( /= (aref cube i (- j 1) k) -1.0)) 
                             (setq change (* ( - (aref cube i j k) (aref cube i (- j 1) k) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube i (- j 1) k) (+ (aref cube i (- j 1) k) change)) 
                             )
                            )
                      (cond (( and (< (+ j 1) N) ( /= (aref cube i (+ j 1) k) -1.0)) 
                             (setq change (* ( - (aref cube i j k) (aref cube i (+ j 1) k) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube i (+ j 1) k) (+ (aref cube i (+ j 1) k) change)) 
                             )
                            )
                      (cond (( and (> k 1) ( /= (aref cube i j (- k 1)) -1.0))
                             (setq change (* ( - (aref cube i j k) (aref cube i j (- k 1)) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube i j (- k 1)) (+ (aref cube i j (- k 1)) change)) 
                             )
                            )
                      (cond (( and (< (+ k 1) N) (/= (aref cube i j (+ k 1)) -1.0)) 
                             (setq change (* ( - (aref cube i j k) (aref cube i j (+ k 1)) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube i j (+ k 1)) (+ (aref cube i j (+ k 1)) change)) 
                             )
                            )
                      )
                     ((= usepartition 0)
                      (cond ((> i 1) 
                             (setq change (* ( - (aref cube i j k) (aref cube (- i 1) j k) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube (- i 1) j k) (+ (aref cube (- i 1) j k) change)) 
                             )
                            )
                      (cond ((< (+ i 1) N) 
                             (setq change (* ( - (aref cube i j k) (aref cube (+ i 1) j k) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube (+ i 1) j k) (+ (aref cube (+ i 1) j k) change)) 
                             )
                            )
                      (cond ((> j 1) 
                             (setq change (* ( - (aref cube i j k) (aref cube i (- j 1) k) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube i (- j 1) k) (+ (aref cube i (- j 1) k) change)) 
                             )
                            )
                      (cond ((< (+ j 1) N) 
                             (setq change (* ( - (aref cube i j k) (aref cube i (+ j 1) k) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube i (+ j 1) k) (+ (aref cube i (+ j 1) k) change)) 
                             )
                            )
                      (cond ((> k 1) 
                             (setq change (* ( - (aref cube i j k) (aref cube i j (- k 1)) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube i j (- k 1)) (+ (aref cube i j (- k 1)) change)) 
                             )
                            )
                      (cond ((< (+ k 1) N) 
                             (setq change (* ( - (aref cube i j k) (aref cube i j (+ k 1)) ) dterm))
                             (setf(aref cube i j k) (- (aref cube i j k) change))
                             (setf(aref cube i j (+ k 1)) (+ (aref cube i j (+ k 1)) change)) 
                             )
                            )  
                      )
                     )
               )
             )
           )
      ; Update max, min, and sum
      (setq clock (+ clock step_count))
      (setq sum 0)
      (setq maxv (aref cube 0 0 0))
      (setq minv (aref cube 0 0 0))
      (dotimes(i N)
        (dotimes(j N)
          (dotimes(k N)
            (cond (( /= (aref cube i j k) -1.0)
                   (setq maxv (max (aref cube i j k) maxv))
                   (setq minv (min (aref cube i j k) minv))
                   (setq sum (+ sum (aref cube i j k)))
                   )
                  )
            )
          )
        )
        
      ; Update ratio
      (setq rat (/ minv maxv))

      ;print data for each loop
      (format t "time: ~S ratio: ~S value: ~S~% " clock rat (aref cube 0 0 0))
      (format t "last val: ~S~%" (aref cube (- N 1) (- N 1) (- N 1)))
      (format t "sum: ~S~%" sum)
      ) 
; print resulting data
(format t "Last element is: ~S~%" (aref cube (- N 1) (- N 1) (- N 1)))
(format t "Box equilibrated in ~S seconds of simulated time. ~%" clock)

